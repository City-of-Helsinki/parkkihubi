openapi: 3.0.1
info:
  title: Parkkihubi Operator API
  description: >-
    Parkkihubi Operator REST API Documentation

    Authentication: Every request must have header:

        Authorization: ApiKey <your api key>
  version: "1.1.0"
servers:
  - url: https://api.parkkiopas.fi/operator/v1/
    description: Production server
  - url: https://testapi.parkkiopas.fi/operator/v1/
    description: Test server
  - url: http://localhost:8000/operator/v1/
    description: Local development server
tags:
  - name: Parkings
    description: >-
      Endpoints for creating and updating parkings
  - name: Parking Information Queries
    description: >-
      Endpoint for performing parking spot information queries
components:
  securitySchemes:
    ApiKey:
      type: apiKey
      name: Authorization
      in: header
  schemas:
    Parking:
      type: object
      example:
        id: 70fb01a8-a17f-4b14-9b99-0060c748411c
        status: valid
        created_at: "2016-12-10T20:34:38Z"
        modified_at: "2016-12-11T21:34:22Z"
        location:
          type: Point
          coordinates: [24.938466, 60.170014]
        registration_number: LOL-007
        time_start: "2016-12-24T21:00:00Z"
        time_end: "2016-12-24T22:00:00Z"
        zone: 2
      properties:
        id:
          description: Unique identifier for the parking
          type: string
          format: uuid
          readOnly: true
        status:
          description: Status of the parking
          type: string
          enum: [valid, not_valid]
          readOnly: true
        created_at:
          description: Creation time for the parking
          type: string
          format: dateTime
          readOnly: true
        modified_at:
          description: Modification time for the parking
          type: string
          format: dateTime
          readOnly: true
        location:
          $ref: '#/components/schemas/Location'
        terminal_number:
          description: >-
            Payment terminal number, if the parking was bought
            from a payment terminal.
          type: string
          default: ''
        registration_number:
          description: Registration number for the parking
          type: string
        time_start:
          description: Start time for the parking
          type: string
          format: dateTime
        time_end:
          description: End time for the parking
          type: string
          format: dateTime
        zone:
          description: Payment zone
          type: integer
          enum: [1, 2, 3]
        is_disc_parking:
          description: >-
            Specify whether this is a parking disc parking.

            Note: For compatibility reasons this field is present in the
            result only for parking disc parkings, i.e. when the value
            is true.
          type: boolean
      required:
        - registration_number
        - time_start
        - zone
    Location:
      description: Location in GeoJSON format
      type: object
      example:
        type: Point
        coordinates: [24.938466, 60.170014]
      properties:
        type:
          description: Geometry type
          type: string
          enum: [Point]
        coordinates:
          description: >-
            An array of coordinates describing the location geometry.
            The items are WGS84 longitude and latitude in that order.
          type: array
          minItems: 2
          maxItems: 2
          items:
            type: number
            format: float
    ParkingInfo:
      description: Parking spot information
      type: object
      example:
        location:
          type: "Point"
          coordinates: [24.938466, 60.170014]
        terminal_number: "34B"
        zone: 2
        rules:
          - after: "2019-11-15T06:00:00Z"
            policy: "disc"
            maximum_duration: 120
          - after: "2019-11-15T16:00:00Z"
            policy: "free"
          - after: "2019-11-16T07:00:00Z"
            policy: "disc"
            maximum_duration: 120
          - after: "2019-11-16T13:00:00Z"
            policy: "free"
          - after: "2019-11-17T02:00:00Z"
            policy: "denied"
          - after: "2019-11-18T02:00:00Z"
            policy: "free"
          - after: "2019-11-18T06:00:00Z"
            policy: "disc"
            maximum_duration: 120
          - after: "2019-11-18T16:00:00Z"
            policy: "free"
          - after: "2019-11-19T02:00:00Z"
            policy: "unknown"
      required:
        - location
        - zone
        - rules
      properties:
        location:
          $ref: '#/components/schemas/Location'
        terminal_number:
          description: >-
            Number of the closest payment terminal, if there is any near
            the given location.
          type: string
        zone:
          description: Payment zone of the parking spot
          type: integer
        rules:
          description: >-
            List of rules that determine if parking is allowed and on
            what conditions.  Each rule is valid for a time period
            starting from the "after" timestamp specified in the rule
            and ending to "after" timestamp of the next rule.
          type: array
          maxItems: 100
          items:
            type: object
            required:
              - after
              - policy
            properties:
              after:
                description: Start time of this rule
                type: string
                format: dateTime
              policy:
                description: >-
                  What kind of parking is allowed during this period.

                  Options are:
                    * `paid`: Must pay the parking fee
                    * `disc`: Must use a parking disc (regular or digital)
                    * `free`: Parking is allowed for free without a disc
                    * `denied`: Parking is not allowed
                    * `unknown`: There is no information available
                type: string
                enum: ["paid", "disc", "free", "denied", "unknown"]
              maximum_duration:
                description: >-
                  Maximum duration of parking during this period, in
                  minutes.

                  Note: Start times of parking disc parkings are rounded
                  to next half hour, which might allow almost 30 minutes
                  more parking time in practice.
                type: integer
  responses:
    BadRequest:  # 400
      description: Bad request, details in request body
      content:
        application/json:
          schema:
            example:
              registration_number: [Enter a valid value.]
    Unauthorized:  # 401
      description: Unauthorized access
    Forbidden:  # 403
      description: Forbidden request
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                enum: [unknown_error, permission_denied, grace_period_over]
              detail:
                type: string
            example:
              code: grace_period_over
              detail: Grace period has passed. Only "time_end" can be updated via PATCH.
    NotFound:  # 404
      description: Parking not found
paths:
  /parking/:
    post:
      tags: ['Parkings']
      summary: Create a new parking
      operationId: createParking
      security: [{ApiKey: []}]
      requestBody:
        required: true
        description: Parking to add to the system
        content:
          application/json:
            schema:
              anyOf:
                - title: Paid parking
                  example:
                    location:
                      type: Point
                      coordinates: [24.938466, 60.170014]
                    registration_number: LOL-007
                    time_start: "2016-12-24T21:00:00Z"
                    time_end: "2016-12-24T22:00:00Z"
                    zone: 2
                  type: object
                  properties:
                    location:
                      $ref: '#/components/schemas/Location'
                    terminal_number:
                      description: >-
                        Payment terminal number, if the parking was bought
                        from a payment terminal.
                      type: string
                      default: ''
                    registration_number:
                      description: Registration number for the parking
                      type: string
                    time_start:
                      description: Start time for the parking
                      type: string
                      format: dateTime
                    time_end:
                      description: End time for the parking
                      type: string
                      format: dateTime
                    zone:
                      description: Payment zone
                      type: integer
                      enum: [1, 2, 3]
                    is_disc_parking:
                      description: >-
                        Specify whether this is a parking disc parking.

                        Note: This field can be left out from the
                        request and will then default to false.  This
                        way the API for regular paid parkings is
                        compatible with the previous version.
                      type: boolean
                      enum: [false]
                      default: false
                  required:
                    - registration_number
                    - time_start
                    - zone
                - title: Parking disc parking
                  example:
                    location:
                      type: Point
                      coordinates: [24.938466, 60.170014]
                    registration_number: LOL-007
                    time_start: "2016-12-24T21:00:00Z"
                    is_disc_parking: true
                  type: object
                  properties:
                    location:
                      $ref: '#/components/schemas/Location'
                    terminal_number:
                      description: >-
                        Payment terminal number, if the parking was bought
                        from a payment terminal.
                      type: string
                      default: ''
                    registration_number:
                      description: Registration number for the parking
                      type: string
                    time_start:
                      description: Start time for the parking
                      type: string
                      format: dateTime
                    time_end:
                      description: End time for the parking
                      type: string
                      format: dateTime
                    is_disc_parking:
                      description: >-
                        Specify whether this is a parking disc parking.
                      type: boolean
                      enum: [true]
                  required:
                    - registration_number
                    - time_start
                    - location
                    - is_disc_parking
      responses:
        '201':
          description: The parking was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Parking'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /parking/{parking_id}/:
    put:
      tags: ['Parkings']
      summary: Update a parking by its ID
      operationId: updateParkingById
      security: [{ApiKey: []}]
      parameters:
        - name: parking_id
          in: path
          required: true
          description: ID of the parking to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        description: Parking to add to the system
        content:
          application/json:
            schema:
              type: object
              example:
                location:
                  type: Point
                  coordinates: [24.938466, 60.170014]
                registration_number: LOL-007
                time_start: "2016-12-24T21:00:00Z"
                time_end: "2016-12-24T22:00:00Z"
                zone: 2
              properties:
                location:
                  $ref: '#/components/schemas/Location'
                registration_number:
                  description: Registration number for the parking
                  type: string
                time_start:
                  description: Start time for the parking
                  type: string
                  format: dateTime
                time_end:
                  description: End time for the parking
                  type: string
                  format: dateTime
                zone:
                  description: Payment zone
                  type: integer
                  enum: [1, 2, 3]
              required:
                - registration_number
                - time_start
                - zone
      responses:
        '200':
          description: The parking was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Parking'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags: ['Parkings']
      summary: Partial update a parking by its ID
      operationId: partialUpdateParkingById
      security: [{ApiKey: []}]
      parameters:
        - name: parking_id
          in: path
          required: true
          description: ID of the parking to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        description: Parking to add to the system
        content:
          application/json:
            schema:
              type: object
              example:
                time_end: "2016-12-25T22:00:00Z"
              properties:
                location:
                  $ref: '#/components/schemas/Location'
                registration_number:
                  description: Registration number for the parking
                  type: string
                time_start:
                  description: Start time for the parking
                  type: string
                  format: dateTime
                time_end:
                  description: End time for the parking
                  type: string
                  format: dateTime
                zone:
                  description: Payment zone
                  type: integer
                  enum: [1, 2, 3]
      responses:
        '200':
          description: The parking was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Parking'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: ['Parkings']
      summary: Delete a parking by its ID
      operationId: deleteParkingById
      security: [{ApiKey: []}]
      parameters:
        - name: parking_id
          in: path
          required: true
          description: ID of the parking to delete
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The parking was deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /parking_info_query/:
    post:
      tags: ['Parking Information Queries']
      summary: Query parking spot information
      operationId: queryParkingInfo
      security: [{ApiKey: []}]
      requestBody:
        required: true
        description: Location of the parking spot to query
        content:
          application/json:
            schema:
              anyOf:
                - title: By GPS coordinates
                  example:
                    location:
                      type: Point
                      coordinates: [24.938466, 60.170014]
                  type: object
                  properties:
                    location:
                      $ref: '#/components/schemas/Location'
                  required:
                    - location
                - title: By payment terminal number
                  example:
                    terminal_number: "34B"
                  type: object
                  properties:
                    terminal_number:
                      description: Payment terminal number
                      type: string
                  required:
                    - terminal_number
      responses:
        '200':
          description: Parking spot information query succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingInfo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
